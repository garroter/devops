- name: Prepare secret YAML and deploy to multiple Kubernetes datacenters
  hosts: localhost
  gather_facts: no
  vars_files:
    - "{{ lookup('env', 'PWD') + '/' + config }}"
  tasks:
    - name: Load config file
      include_vars:
        file: "{{ lookup('env', 'PWD') + '/config-' + config + '.yml' }}"

    - name: Prepare and encode secrets
      set_fact:
        encoded_secrets: "{{ encoded_secrets | default({}) | combine({item.key: (item.value | string | b64encode)}) }}"
      loop: "{{ secrets | dict2items }}"
      loop_control:
        label: "{{ item.key }}"

    - name: Generate secret file from config
      set_fact:
        secret_yaml: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: {{ secret_name | default('default') }}
            namespace: {{ namespace | default('default') }}
          type: Opaque
          data:
            {% for key, value in encoded_secrets.items() %}
            {{ key }}: {{ value }}
            {% endfor %}

    - name: Save secret locally
      copy:
        content: "{{ secret_yaml }}"
        dest: "./config-{{ secret_name }}-{{ env }}.yml"
        mode: '0600'

    - name: Verify secret file exists
      stat:
        path: "./config-{{ secret_name }}-{{ env }}.yml"
      register: secret_file_stat

    - name: Fail if secret file is missing
      fail:
        msg: "Secret file ./config-{{ secret_name }}-{{ env }}.yml does not exist!"
      when: not secret_file_stat.stat.exists

    - name: Apply Kubernetes secret to multiple contexts
      command: kubectl --context "{{ context }}" apply -f "./config-{{ secret_name }}-{{ env }}.yml"
      register: kubectl_output
      loop: "{{ kubernetes_contexts }}"
      loop_control:
        loop_var: context

    - name: Debug kubectl output
      debug:
        var: kubectl_output
      
    # Restart deployment na wszystkich kontekstach
    - name: Restart deployment po aktualizacji sekretu
      command: kubectl --context "{{ context }}" -n {{ namespace }} rollout restart deployment {{ deployment }}
      loop: "{{ kubernetes_contexts }}"
      loop_control:
        loop_var: context
      register: restart_output
      
    - name: Wait for deployment to rollout
      command: kubectl --context "{{ context }}" -n {{ namespace }} rollout status deployment {{ deployment }} --timeout=180s
      loop: "{{ kubernetes_contexts }}"
      loop_control:
        loop_var: context
      
    - name: Debug restart output
      debug:
        var: restart_output
