- name: Retrieve Kubernetes secret from one datacenter and generate config YAML
  hosts: localhost
  gather_facts: no
  vars_files:
    - "{{ lookup('env', 'PWD') + '/' + config }}"

  tasks:
    - name: Load config file
      include_vars:
        file: "{{ lookup('env', 'PWD') + '/config-' + config + '.yml' }}"
      register: config_vars

    - name: Debug loaded variables
      debug:
        var: config_vars
      when: debug is defined  # Opcjonalne, do debugowania

    - name: Retrieve secret from Kubernetes
      command: kubectl --context "{{ kubernetes_contexts[0] }}" get secret "{{ secret_name }}" -n "{{ namespace }}" -o yaml
      register: secret_output
      changed_when: false
      ignore_errors: true  # Kontynuuj w przypadku błędu (np. brak sekretu)

    - name: Parse secret data
      set_fact:
        secret_data: "{{ secret_output.stdout | from_yaml }}"
      when: secret_output.rc == 0  # Przetwarzaj tylko, jeśli polecenie się powiodło

    - name: Decode secret values
      set_fact:
        decoded_secrets: "{{ decoded_secrets | default({}) | combine({item.key: (item.value | b64decode)}) }}"
      loop: "{{ secret_data.data | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      when: secret_data is defined

    - name: Generate configuration YAML
      set_fact:
        config_yaml: |
          deployment: {{ deployment }}
          secret_name: {{ secret_name }}
          kubernetes_contexts:
          {% for ctx in kubernetes_contexts %}
            - "{{ ctx }}"
          {% endfor %}
          env: {{ env }}
          namespace: {{ namespace }}
          secrets:
          {% for key, value in decoded_secrets.items() %}
            {{ key }}: '{{ value }}'
          {% endfor %}
      when: decoded_secrets is defined

    - name: Save configuration YAML locally
      copy:
        content: "{{ config_yaml }}"
        dest: "./config-{{ secret_name }}-{{ env }}.yml"
        mode: '0600'
      when: config_yaml is defined

    - name: Verify configuration file exists
      stat:
        path: "./config-{{ secret_name }}-{{ env }}.yml"
      register: config_file_stat

    - name: Fail if configuration file is missing
      fail:
        msg: "Configuration file ./config-{{ secret_name }}-{{ env }}.yml does not exist!"
      when: not config_file_stat.stat.exists
